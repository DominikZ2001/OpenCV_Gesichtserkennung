import cv2
import numpy as np 
from PIL import Image
import os

# Path for face image database
path = 'dataset'

recognizer = cv2.face.LBPHFaceRecognizer_create()  #face recognizer included on opencv package
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml");

# function to get all images of 'dataset' and returning 2 arrays (IDs and faces)
def getImagesAndLabels(path):

    imagePaths = [os.path.join(path,f) for f in os.listdir(path)]  #array for safe all paths from images
    faceSamples=[]
    ids = []

    for imagePath in imagePaths:

        PIL_img  = Image.open(imagePath).convert('L') #convert it to monochrome (einfarbig)
        img_numpy = np.array(PIL_img,'uint8') #creates an array

        id = int(os.path.split(imagePath)[-1].split(".")[1]) #get the number of saved faces 
        faces = detector.detectMultiScale(img_numpy) #MultiScale detects objects of different sizes in the input image and returns rectangles positioned on the faces. 

        for (x,y,w,h) in faces: #loop through each rectangle (each face detected) using its coordinates generated by the function detectmultiscale
            faceSamples.append(img_numpy[y:y+h,x:x+w])
            ids.append(id) 

    return faceSamples,ids

print ("\n [INFO] Training faces. It will take a few seconds. Wait ...")
faces,ids = getImagesAndLabels(path)

recognizer.train(faces, np.array(ids)) #train the recognizer with the 2 arrays of function getimagesandlabels

# Save the model into trainer/trainer.yml
recognizer.write('trainer/trainer.yml')

# Print the numer of faces trained and end program
print("\n [INFO] {0} faces trained. Exiting Program".format(len(np.unique(ids))))
