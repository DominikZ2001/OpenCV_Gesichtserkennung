import cv2
import os
import numpy as np 
from PIL import Image


cam = cv2.VideoCapture(0)
cam.set(3, 640) # set video width
cam.set(4, 480) # set video height
face_detector = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# For each person, enter one numeric face id
face_id = input('\n enter user id end press <n> ==>  ')
print("\n [INFO] Initializing face capture. Look the camera and wait ...")

def training():
    # Path for face image database
    path = 'dataset'

    recognizer = cv2.face.LBPHFaceRecognizer_create()  #face recognizer included on opencv package
    detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml");

    # function to get all images of 'dataset' and returning 2 arrays (IDs and faces)
    def getImagesAndLabels(path):

        imagePaths = [os.path.join(path,f) for f in os.listdir(path)]  #array for safe all paths from images
        faceSamples=[]
        ids = []

        for imagePath in imagePaths:

            PIL_img  = Image.open(imagePath).convert('L') #convert it to monochrome (einfarbig)
            img_numpy = np.array(PIL_img,'uint8') #creates an array

            id = int(os.path.split(imagePath)[-1].split(".")[1]) #get the number of saved faces 
            faces = detector.detectMultiScale(img_numpy) #MultiScale detects objects of different sizes in the input image and returns rectangles positioned on the faces. 

            for (x,y,w,h) in faces: #loop through each rectangle (each face detected) using its coordinates generated by the function detectmultiscale
                faceSamples.append(img_numpy[y:y+h,x:x+w])
                ids.append(id) 

        return faceSamples,ids

    print ("\n [INFO] Training faces. It will take a few seconds. Wait ...")
    faces,ids = getImagesAndLabels(path)

    recognizer.train(faces, np.array(ids)) #train the recognizer with the 2 arrays of function getimagesandlabels

    # Save the model into trainer/trainer.yml
    recognizer.write('trainer/trainer.yml')

    # Print the numer of faces trained and end program
    print("\n [INFO] {0} faces trained.".format(len(np.unique(ids))))

training()
# Initialize individual sampling face count
count = 0
while(True):
    ret, img = cam.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #Converts an image from one color space to another.
    faces = face_detector.detectMultiScale(gray, 1.3, 5) #Detects objects of different sizes in the input image. The detected objects are returned as a list of rectangles.
    for (x,y,w,h) in faces:
        cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)  #used to draw a rectangle on any image  
        count += 1
        # Save the captured image into the datasets folder
        cv2.imwrite("dataset/User." + str(face_id) + '.' + str(count) + ".jpg", gray[y:y+h,x:x+w])
        cv2.imshow('image', img)
    k = cv2.waitKey(100) & 0xff # Press 'ESC' for exiting video
    if k == 27:
        break
    elif count >= 50: # Take 50 face sample and stop video
        break


#cleanup and training the recognizer with all faces  
cam.release()
cv2.destroyAllWindows()    
training()     
print("\n [INFO] Exiting Program and cleanup stuff")
